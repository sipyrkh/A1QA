import exception.FileAlreadyExistsException;
import org.testng.Assert;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

import java.util.ArrayList;

public class TestFileStorage {

    private ArrayList<File> files;
    private int availableSize;
    private int maxSize;
    private static FileStorage myFileStorage;
    private static final long TIMER_FOR_EVEN_AVAILABLE_SIZE = 1800;
    private static final long TIMER_FOR_ODD_AVAILABLE_SIZE = 3000;

    @BeforeTest
    public void testInitializeObjects(){

        files = new ArrayList<File>();
        availableSize = 100;
        maxSize = 100;
    }


    @Test(groups = "positive")
    public void testConstructorWithParameter(){
        int expectedAvailableSize = 5565;
        myFileStorage = new FileStorage(maxSize);
        Assert.assertEquals(myFileStorage.getAvailableSize(), expectedAvailableSize);
    }

   /* @Test(expectedExceptions = IllegalArgumentException.class)
    public void testWritingException(){
        int negativeSize = -1;
        myFileStorage = new FileStorage(negativeSize);
    }
*/
   @Test(groups = "positive")
    public void testWrite() throws FileAlreadyExistsException {
        File theSixsFile = new File("TheFirstFile.txt", "The First File content");
        Assert.assertTrue(myFileStorage.write(theSixsFile));
    }

    @Test(groups = "positive")
    public void testWriteInvalidAvalaibleSize() throws FileAlreadyExistsException {
        String str = new String(new char[550]).replace("\0","a");
        File theSixsFile = new File("TheFirstFile.txt", str);
        Assert.assertFalse(myFileStorage.write(theSixsFile));
    }

    @Test(groups = "positive")
    public void testWritingTimerOddAvailableSize() throws FileAlreadyExistsException {
        File theSixsFile = new File("TheSixsFile.txt", "Thehgf");
        long start = System.currentTimeMillis();
        myFileStorage.write(theSixsFile);
        long finish = System.currentTimeMillis();
        long expectedTime = finish - start;
        Assert.assertTrue(TIMER_FOR_ODD_AVAILABLE_SIZE <= expectedTime);
    }

    @Test(groups = "positive")
    public void testWritingTimerEvenAvailableSize() throws FileAlreadyExistsException {
        File theSixsFile = new File("TheSixsFile.txt", "qwertyui");
        long start = System.currentTimeMillis();
        myFileStorage.write(theSixsFile);
        long finish = System.currentTimeMillis();
        long expectedTime = finish - start;
        Assert.assertTrue(TIMER_FOR_EVEN_AVAILABLE_SIZE <= expectedTime);
    }


    @Test(groups = "positive")
    public void testGetAvailableSize(){
        int expectedAvailableSize = 156;
        System.out.println(myFileStorage.getAvailableSize());
        Assert.assertEquals(myFileStorage.getAvailableSize(), expectedAvailableSize);
    }

    @Test(groups = "positive")
    public void testGetMaxSize(){
        int expectedMaxSize = 100;
        Assert.assertEquals(myFileStorage.getMaxSize(), expectedMaxSize);
    }


    @Test(groups = "positive")
    public void testGetFiles(){

        for(int i = 0; i < files.size(); i++){
            Assert.assertEquals(myFileStorage.getFiles().get(i).getFilename(), files.get(i).getFilename());
        }
    }

    @Test(groups = "positive")
    public void testDeleteExistentFile() throws FileAlreadyExistsException {
        File theFirstFile = new File("TheFirstFile.txt", "The First File content");
        File theSecondFile = new File("theSecondFile.txt", "The Second File content");
        myFileStorage.write(theFirstFile);
        myFileStorage.write(theSecondFile);
        Assert.assertTrue(myFileStorage.isExists(theFirstFile.getFilename()));
    }

    @Test(groups = "positive")
    public void testDeleteNonExistentFile() throws FileAlreadyExistsException {
        File theFirstFile = new File("TheFirstFile.txt", "The First File content");
        File theRandomFile = new File("theRandomFile.txt", "The Random File content");
        myFileStorage.write(theFirstFile);
        Assert.assertFalse(myFileStorage.isExists(theRandomFile.getFilename()));
    }

    @Test(groups = "negative")
    public void testVacateMemoryAfterDeletingFile() throws FileAlreadyExistsException {
        File theFirstFile = new File("TheFirstFile.txt", "The First File content");
        myFileStorage.write(theFirstFile);
        myFileStorage.delete(theFirstFile.getFilename());
        int afterDeleting = myFileStorage.getAvailableSize();
        int expectedAvailableSize = afterDeleting - theFirstFile.getSize();
        Assert.assertEquals(myFileStorage.getAvailableSize(), expectedAvailableSize);
    }

}
